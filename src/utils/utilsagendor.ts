import axios from 'axios';
import { error } from 'console';
import dotenv from "dotenv"
//import cron from 'node-cron';
const token = process.env.TOKEN_AGENDOR
dotenv.config()
export interface followUp {
    id: number,
    message: string
 }
 let idStage: followUp

 export interface saveNote {
  date:any,
  message: string
}
const folowUpMessage1 = `Ol√° tudo bem?? 
Voc√™ demonstrou interesse em nossos closets mas n√≥s n√£o conseguimos conversar referente a ele ainda. üòï

Preciso que voc√™ me conte um pouco sobre a sua necessidade e problema de como guardar as roupas, para que eu possa te apresentar as melhores solu√ß√µes com melhor custo-benef√≠cio.

Pode mandar um √°udio ou v√≠deo se facilita para voc√™! 
Aguardo aqui sua mensagem.` 

const folowUpMessage2 = `Oiii
N√£o estou conseguindo uma resposta sua. Quero ser bem honesto com voc√™.
Tenho mais algumas pessoas interessadas para apresentar nosso produto e preciso dar continuidade 
no meu trabalho, mas voc√™ √© prioridade para mim pois eu n√£o tive uma resposta sua!
`
const folowUpMessage3 = `Ol√°, uma pena isso üòï 

Estava ansioso para mostrar como nossa empresa poderia resolver o seu problema de como guardar as roupas.

 Seria uma √≥tima sa√≠da para voc√™ tamb√©m, mas, pela falta de resposta, acredito que este n√£o seja mais uma prioridade no momento.
 Sendo assim, este ser√° meu √∫ltimo contato para voc√™.üôÅ 

Caso mude de ideia no futuro ou queria voltar a atacar os pontos que falei acima, fico a disposi√ß√£o. üòé
`



//////////////fun√ß√£o para encontrar o usuario pelo mobile/////////////////
export async function getPerson(number: string) {
    let id: any;
try {
    let response = await axios.get(`https://api.agendor.com.br/v3/people?mobile_phone=${number}`, {
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `${token}`
        },
    })
   id = response.data.data[0].id
    console.log(id)
    } catch (error) {
        console.error('Erro na requisi√ß√£o:', error);
    }
   // console.log(fomratnum)
    return id
}

/////////////////fun√ß√£o para pegar ID do neg√≥cio //////////////////////     
async function getdeal(idPerson:number){
    let deal: any;
    let config = {
      method: 'get',
      maxBodyLength: Infinity,
      url: `https://api.agendor.com.br/v3/people/${idPerson}/deals`,
      headers: { 
        'Authorization': 'Token 603364cc-5636-4f66-8911-62fd6466164b', 
      }
    };
    await axios.request(config)
    .then((response) => {
      //console.log(JSON.stringify(response.data));
      deal = response.data
      return deal
    })
    .catch((error) => {
      console.log(error);
    });
    return deal
    }

/////////////////fun√ß√£o para pegar id da pessoa pelo mobile_phone, e retornar o ID do neg√≥cio com a fun√ß√£o dealId //////////////////////     
export const getDealId = async(number: string) => {
  try{
    let idPerson = await getPerson(number)
    const dealId:any = await getdeal(idPerson)
     return dealId.data[0].id
    }
    catch {
      console.log(error)
    }
   }
     ///////////////atualiza os estagios do ned√≥cio/////////////////
export async function updateStage(idDeal:number, idStage:number){
  console.log(`Atualizando est√°gio do neg√≥cio ${idDeal} para ${idStage}`);
    let data = JSON.stringify({
      "dealStage": idStage,
    });
  let config = {
    method: 'put',
    maxBodyLength: Infinity,
    url: `https://api.agendor.com.br/v3/deals/${idDeal}/stage`,
    headers: { 
      'Authorization': `${token}`, 
      'Content-Type': 'application/json'
    },
    data : data
  };
  
  axios.request(config)
  .then((response) => {
    console.log(JSON.stringify(response.data.data));
    console.log(`Atualizando est√°gio do neg√≥cio ${idDeal} para ${idStage}`);
  })
  .catch((error) => {
    console.log(error);
  });
  }
//////////////////////////////criar nota no hist√≥rico do cliente////////////////// 
export async function createNotePerson(number:string, chat:any){
    const personId = await getPerson(number)
    console.log(`Criando nota para o cliente ${personId}`);
    let data = JSON.stringify({
      "text": chat,
      "user": "784879"
    });
    let config = {
      method: 'post',
      maxBodyLength: Infinity,
      url: `https://api.agendor.com.br/v3/people/${personId}/tasks`,
      headers: { 
        'Authorization': `${token}`, 
        'Content-Type': 'application/json', 
      },
      data : data
    };
    axios.request(config)
    .then((response) => {
      console.log(response.data.data);
      console.log(`Nota criada para o cliente ${personId}`);
    })
    .catch((error) => {
      console.log(error);
    });
    }

///////////////fun√ß√£o para atualizat pessoa/////////////
export async function updatePerson (id:number, mobile:string){
    let data = JSON.stringify({
        "contact": {
          "mobile": mobile
      }
    });
    let config = {
      method: 'put',
      maxBodyLength: Infinity,
      url: `https://api.agendor.com.br/v3/people/${id}`,
      headers: { 
        'Authorization': `${token}`, 
        'Content-Type': 'application/json'
      },
      data : data
    };
    
    axios.request(config)
    .then((response) => {
      console.log(JSON.stringify(response.data.data));
    })
    .catch((error) => {
      console.log(error);
    })
    }

    ////////////////////////////////////fun√ß√£o para criar pessoa caso n√£o esteja cadastrada////////////////////////////
    export async function createPerson(name: string, whatsapp:string, mobile: string) {
        const url = 'https://api.agendor.com.br/v3/people';
    
        const requestBody = {
            name: `${name}`,
            contact: {
              mobile:`${mobile}`,
              whatsapp:`${whatsapp}`
            },
        };
        try {
            const response = await axios.post(url, requestBody, {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `${token}`
                }
            });
            console.log('Pessoa criada com sucesso:', response.data.data);
        } catch (error) {
            console.error('Erro ao criar pessoa:', error);
        }
    }
    
    ///////fun√ß√£o para pegar o numero da pessoa pela id, utilizada para conseguir os dados da pessoa quando √© enviado menssagem e neg√≥cio//////////////////
   export async function getNumber (id:any){
        let data = ''
        let config = {
          method: 'get',
          maxBodyLength: Infinity,
          url: `https://api.agendor.com.br/v3/people?id=${id}`,
          headers: { 
            'Authorization': token, 
            'Content-Type': 'application/json', 
            
          },
          data : data
        };
        
        const response = await axios.request(config)
        return response 
        }

///////////fun√ß√£o para criar neg√≥cio para pessoa//////////////////////   
   export const criarNeg√≥cioPessoa = async (id:number) =>{
    let data = JSON.stringify({
      "title": "Iniciar pre-atendimento",
      "dealStatusText": "ongoing",
      "funnel": 690725,
      "dealStage": 1,
    });
    let config = {
      method: 'post',
      maxBodyLength: Infinity,
      url: `https://api.agendor.com.br/v3/people/${id}/deals`,
      headers: { 
        'Authorization': `${token}`, 
        'Content-Type': 'application/json', 
      },
      data : data
    };
    
 await axios.request(config)
    .then((response) => {
      console.log(JSON.stringify(response.data));
    })
    .catch((error) => {
      console.log(error);
    });
  }
//////////////setar est√°gio do folow-up baseado na tentativa /////////////////////
 export function getStageIdBasedOnAttempt(attempt:number):followUp {
    if(attempt === 1){
       idStage = {
        id:2,
        message: folowUpMessage1
       }
    }
    if(attempt === 2){
        idStage = {
        id:3,
        message:folowUpMessage2
        }
     }
     if(attempt === 3){
        idStage = {
            id:4,
            message:folowUpMessage3
            }
  }
     return idStage
}
//////////////atuliza horario do neg√≥cio para os folow-ups/////////////////
export async function updateFollowUpTime(dealId:number, newTime:string) {
  let data = JSON.stringify({
    "startTime": newTime // Substitua por um valor de data/hora real
  });
  let config = {
    method: 'put', // Use 'put' ou 'patch' para atualizar
    url: `https://api.agendor.com.br/v3/deals/${dealId}`, // Substitua ${dealId} pelo ID real
    headers: { 
      'Content-Type': 'application/json', 
      'Authorization': 'Bearer YOUR_AUTH_TOKEN' // Substitua pelo seu token de autentica√ß√£o
    },
    data: data
  };

  try {
    const response = await axios.request(config);
    console.log(JSON.stringify(response.data));
  } catch (error) {
    console.error(error);
  }
}
//////////////////funcao para fechar neg√≥cio como perdido//////////////////
export async function updateStatus(idDeal:number, status:string){
  console.log(`Atualizando status do neg√≥cio ${idDeal} para ${status}`);
    let data = JSON.stringify({
        "dealStatusText": `${status}`,
        });
let config = {
    method: 'put',
    maxBodyLength: Infinity,
    url: `https://api.agendor.com.br/v3/deals/${idDeal}/status`,
    headers: { 
      'Authorization': `${token}`, 
      'Content-Type': 'application/json', 
    },
    data : data
  };
  axios.request(config)
  .then((response) => {
    console.log(JSON.stringify(response.data));
    console.log(`Status do neg√≥cio ${idDeal} atualizado para ${status}`);
  })
  .catch((error) => {
    console.log(error);
  });
}
/*
cron.schedule('* * * * *', async () => {
  try {
      // Obtenha os clientes que precisam de follow-up do banco de dados
      const clientesParaFollowUp = await getClientesParaFollowUp();

      for (const cliente of clientesParaFollowUp) {
          // Verifique a data da √∫ltima atualiza√ß√£o e o n√∫mero de tentativas
          // Realize as a√ß√µes necess√°rias (por exemplo, enviar um novo follow-up)
      }
  } catch (error) {
      console.error('Erro ao executar a tarefa de follow-up:', error);
  }
});
*/
